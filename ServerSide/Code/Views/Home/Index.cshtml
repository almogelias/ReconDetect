@{
    ViewBag.Title = "Home Page";
}

<!DOCTYPE HTML>
<html>
<head>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/networkgraph.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>

    <script>
        window.onload = function () {
            // Initial Values
            var entitiesLength = 0
            var xValuePackets = 0;
            var yValuePackets = 10;
            var xValueFlows = 0;
            var yValueFlows = 10;
            var packetLength = 0;
            var flowLength = 0;
            var newDataCount = 5;
            dataPointsPackets = [];
            dataPointsFlows = [];
            updateDataEntityGraph();

            var chart1 = new CanvasJS.Chart("chartContainer1", {
                theme: "light2",
                title: {
                    text: "Packets Count Per 10 Seconds"
                },
                axisY: {
                    suffix: " Packets",
                },
                data: [{
                    type: "spline",
                    yValueFormatString: "#,##0.## Packets",
                    dataPoints: dataPointsPackets
                }]
            });
            var chart2 = new CanvasJS.Chart("chartContainer2", {
                theme: "light2",
                title: {
                    text: "Packets Count Flows"
                },
                axisY: {
                    suffix: " Packets",
                },
                data: [{
                    type: "column",
                    color: "#7B68EE",
                    yValueFormatString: "#,##0.## Flows",
                    dataPoints: dataPointsFlows
                }]
            });

            updateDataCharts();


            function addData(data) {

                if (newDataCount !== 1) {

                    $.each(data[1], function (key, value, anomaly = value['Anomaly']) {
                        if (anomaly == '1') {
                            dataPointsPackets.push({ x: value.x, y: parseFloat(value.y), 'markerColor': "red", 'markerType': "circle" });
                        }
                        else {
                            dataPointsPackets.push({ x: value.x, y: parseFloat(value.y)});
                        }
                        xValuePackets++;
                        yValuePackets = parseFloat(value.y);
                    });

                    $.each(data[2], function (key, value, anomaly = value['Anomaly']) {
                        if (anomaly == '1') {
                            dataPointsFlows.push({ x: value.x, y: parseFloat(value.y),'color':"red"});
                        }
                        dataPointsFlows.push({ x: value.x, y: parseFloat(value.y)});
                        xValueFlows++;
                        yValueFlows = parseFloat(value.y);
                    });


                    newDataCount = 1;
                }
                else {
                    if (dataPointsPackets.length > 25) {
                        dataPointsPackets.shift();
                    }
                    //console.log(data[1][data[1].length - 1]);
                    if (dataPointsPackets.length != 0) {
                    dataPointsPackets.push({ x: data[1][data[1].length - 1].x, y: parseFloat(data[1][data[1].length - 1].y) });
                    xValuePackets++;
                    yValuePackets = parseFloat(data[1][data[1].length - 1].y);

                    if (dataPointsFlows.length > 25) {
                        dataPointsFlows.shift();
                    }
                    dataPointsFlows.push({ x: data[2][0].x, y: parseFloat(data[2][0].y) });
                    xValueFlows++;
                    yValueFlows = parseFloat(data[2][data[2].length - 1].y);
                    }
                }

                chart1.render();

                if (data[2].length > flowLength) {
                    chart2.render();
                    flowLength = data[2].length;
                }
                setTimeout(updateDataCharts, 5000);
            }

            function addEntity(entities) {
                // Add the nodes option through an event call. We want to start with the parent
                // item and apply separate colors to each child element, then the same color to
                // grandchildren.
                if (entities.length != entitiesLength) {
                    Highcharts.addEvent(
                        Highcharts.Series,
                        'afterSetOptions',
                        function (e) {

                            //colors code
                            var black = 1;
                            var green = 2;
                            var orange = 3;
                            var red = 8;

                            var colors = Highcharts.getOptions().colors,
                                nodes = {};

                            if (
                                this instanceof Highcharts.seriesTypes.networkgraph &&
                                e.options.id === 'lang-tree'
                            ) {
                                e.options.data.forEach(function (link) {
                                    for (var i = 0; i < entities.length; i++) {
                                        
//                                        if (link[0] == entities[i][0] && entities[i][0].includes(".", 4)) {
                                        if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(entities[i][0])) {
                                            
                                                nodes[entities[i][0]] = {
                                                id: entities[i][0],
                                                marker: {
                                                    radius: 25
                                                },
                                                color: colors[green]
                                                };
                                            
                                        }

                                        else if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(entities[i][1])) {
                                                nodes[entities[i][1]] = {
                                                id: entities[i][1],
                                                marker: {
                                                    radius: 25
                                                },
                                                color: colors[green]
                                                };
                                        }

                                        else if (entities[i][1].includes(".")) {
                                                nodes[entities[i][1]] = {
                                                id: entities[i][1],
                                                marker: {
                                                    radius: 12
                                                },
                                                color: colors[orange]
                                                };
                                        }

                                        else if (entities[i][0].includes(".")) {
                                            
                                                nodes[entities[i][0]] = {
                                                id: entities[i][0],
                                                marker: {
                                                    radius: 12
                                                },
                                                color: colors[orange]
                                                };  
                                        }

                                        if (entities[i][2] == 1) {
                                            if (!((/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(entities[i][0])) ||
                                                (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(entities[i][1]))))
                                                    {
                                                    nodes[entities[i][0]] = {
                                                    id: entities[i][0],
                                                    marker: {
                                                    radius: 12
                                                    },
                                                    color: colors[red]
                                                    };

                                                    nodes[entities[i][1]] = {
                                                    id: entities[i][1],
                                                    marker: {
                                                    radius: 5
                                                    },
                                                    color: colors[red]
                                                    };    
                                                    }
                                        }

                                    }

                                });

                                e.options.nodes = Object.keys(nodes).map(function (id) {
                                    return nodes[id];
                                });
                            }
                        }
                    );

                    Highcharts.chart('container', {
                        chart: {
                            type: 'networkgraph',
                            height: '53%'
                        },
                        title: {
                            text: 'Entities Map'
                        },
                        subtitle: {
                            text: 'Network Graph'
                        },
                        plotOptions: {
                            networkgraph: {
                                keys: ['from', 'to'],
                                layoutAlgorithm: {
                                    enableSimulation: true,
                                    friction: -0.9
                                }
                            }
                        },
                        series: [{
                            dataLabels: {
                                enabled: true,
                                linkFormat: ''
                            },
                            id: 'lang-tree',
                            data: entities
                        }]
                    });
                    entitiesLength = entities.length;
                    setTimeout(updateDataEntityGraph, 10000);
                }
                else {
                    setTimeout(updateDataEntityGraph, 5000);
                }
            }





            function updateDataCharts() {
                //$.getJSON("/home/jsonHome?xstart=" + xValuePackets + "&ystart=" + yValuePackets + xValueFlows + "&ystart=" + yValueFlows + "&length=" + newDataCount, addData);
                $.getJSON("/home/jsonHome", addData);
            }

            function updateDataEntityGraph() {
                $.getJSON("/home/JsonNetwork", addEntity);
            }


        }
    </script>
</head>
<body>
    <br />
    <figure class="highcharts-figure" >
        <div id="container"></div>
        <p class="highcharts-description">
            This graph shows the network entities, where the nodes represent the hosts 
            and the TCP protocols are the relation between them.
            The nodes can be dragged around and will be repositioned dynamically.
            Network graphs are typically used to show relations in data. In this
            case, we are showing a relationship structure.
        </p>
    </figure>
    <br />
    <div id="chartContainer1" style="height: 370px; width: 100%;"></div>
    <br/>
    <div id="chartContainer2" style="height: 370px; width: 100%;"></div>
    <script src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
    <script src="https://canvasjs.com/assets/script/jquery.canvasjs.min.js"></script>

</body>
</html>
